// Script de remplacement automatique des emojis par des ic√¥nes Lucide
document.addEventListener('DOMContentLoaded', function() {
    
    // Mapping complet des emojis vers les ic√¥nes Lucide
    const emojiToIconMap = {
        // Apprentissage et ressources
        'üìö': 'book-open',
        'üìñ': 'book-open',
        'üí°': 'lightbulb',
        'üìù': 'file-text',
        'üìÑ': 'file',
        'üìã': 'clipboard-list',
        'üéì': 'graduation-cap',
        
        // Divertissement et m√©dias
        'üéÆ': 'gamepad-2',
        'üé¨': 'video',
        'üéµ': 'music',
        'üé≠': 'theater',
        'üé™': 'tent',
        'üé®': 'palette',
        'üéØ': 'target',
        
        // Technologie
        'üíª': 'monitor',
        'üñ•Ô∏è': 'monitor',
        'üì±': 'smartphone',
        'üì∑': 'camera',
        'üì∏': 'camera',
        'üìû': 'phone',
        'üìß': 'mail',
        'üåê': 'globe',
        'üîß': 'wrench',
        'üõ†Ô∏è': 'wrench',
        '‚öôÔ∏è': 'settings',
        
        // Outils et recherche
        'üîç': 'search',
        'üìä': 'bar-chart-3',
        'üìà': 'trending-up',
        'üìâ': 'trending-down',
        
        // Communication
        'üí¨': 'message-circle',
        'üí≠': 'message-square',
        'üí™': 'zap',
        'üíØ': 'award',
        
        // √âmotions et symboles
        'üî•': 'flame',
        'üíé': 'gem',
        '‚ú®': 'star',
        'üåü': 'star',
        'üí´': 'zap',
        'üí•': 'zap',
        'üí¢': 'alert-circle',
        'üí¶': 'droplets',
        'üíß': 'droplets',
        'üí®': 'wind',
        'üí©': 'x-circle',
        
        // Navigation et interface
        'üè†': 'home',
        '‚ùì': 'help-circle',
        '‚è∞': 'clock',
        '‚è±Ô∏è': 'clock',
        'üìÖ': 'calendar',
        'üé§': 'mic',
        'üèÜ': 'trophy',
        '‚ôø': 'wheelchair',
        
        // Actions et progression
        'üöÄ': 'rocket',
        '‚ö°': 'zap',
        'üß™': 'flask-conical',
        
        // Images et m√©dias
        'üñºÔ∏è': 'image',
        'üé•': 'video',
        
        // Statuts et priorit√©s
        '‚úÖ': 'check-circle',
        '‚ùå': 'x-circle',
        '‚ö†Ô∏è': 'alert-triangle',
        '‚ÑπÔ∏è': 'info',
        
        // Construction et d√©veloppement
        'üèóÔ∏è': 'building-2',
        'üîó': 'link',
        'üöß': 'construction',
        
        // Emojis suppl√©mentaires
        'üîÑ': 'refresh-cw',
        'üì•': 'download',
        'üî§': 'type',
        'üé°': 'ferris-wheel',
        'üê∏': 'frog',
        'üçΩÔ∏è': 'utensils',
        'ü•ï': 'carrot',
        '‚öîÔ∏è': 'swords',
        'üì¶': 'package',
        'üìÅ': 'folder',
        'üÜò': 'sos',
        '‚öñÔ∏è': 'scale',
        'üóìÔ∏è': 'calendar',
        'üö´': 'x-circle',
        'üí∞': 'coins',
        'üîå': 'plug',
        'üß†': 'brain',
        'üíº': 'briefcase',
        
        // Emojis pour la page consignes
        'üë®‚Äçüè´': 'user-graduate',
        'üë®\u200düè´': 'user-graduate', // Version alternative avec ZWJ
        'ü§ù': 'handshake',
        'üìñ': 'book-open'
    };

    // Fonction pour remplacer les emojis dans le texte
    function replaceEmojisInText(text) {
        let result = text;
        Object.keys(emojiToIconMap).forEach(emoji => {
            const iconName = emojiToIconMap[emoji];
            const iconHtml = `<i data-lucide="${iconName}" class="icon icon-sm"></i>`;
            // Utiliser une regex plus robuste pour les emojis
            const escapedEmoji = emoji.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            result = result.replace(new RegExp(escapedEmoji, 'g'), iconHtml);
        });
        return result;
    }

    // Fonction pour remplacer les emojis dans les √©l√©ments HTML
    function replaceEmojisInElements() {
        // Remplacer dans les textes (y compris les √©l√©ments format√©s)
        const textNodes = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, li, span, a, button, strong, em, b, i');
        
        textNodes.forEach(element => {
            // V√©rifier si l'√©l√©ment contient des emojis
            const text = element.textContent;
            let hasEmojis = false;
            
            // V√©rification plus robuste pour les emojis compos√©s
            Object.keys(emojiToIconMap).forEach(emoji => {
                if (text.includes(emoji)) {
                    hasEmojis = true;
                }
            });
            
            if (hasEmojis) {
                // Remplacer les emojis tout en pr√©servant le formatage
                element.innerHTML = replaceEmojisInText(text);
            }
        });

        // Remplacer dans les attributs alt et title
        const elementsWithAlt = document.querySelectorAll('[alt], [title]');
        elementsWithAlt.forEach(element => {
            if (element.alt) {
                Object.keys(emojiToIconMap).forEach(emoji => {
                    element.alt = element.alt.replace(emoji, emojiToIconMap[emoji]);
                });
            }
            if (element.title) {
                Object.keys(emojiToIconMap).forEach(emoji => {
                    element.title = element.title.replace(emoji, emojiToIconMap[emoji]);
                });
            }
        });
    }

    // Fonction pour remplacer les emojis dans les balises title
    function replaceEmojisInPageTitle() {
        if (document.title) {
            let title = document.title;
            Object.keys(emojiToIconMap).forEach(emoji => {
                if (title.includes(emoji)) {
                    title = title.replace(emoji, emojiToIconMap[emoji]);
                }
            });
            if (title !== document.title) {
                document.title = title;
            }
        }
    }

    // Fonction pour remplacer les emojis dans les divs avec classe card-icon
    function replaceEmojisInCardIcons() {
        const cardIcons = document.querySelectorAll('.card-icon, .livrable-icon, .step-icon, .constraint-icon, .deliverable-icon, .tool-icon, .tip-icon, .support-icon, .support-item-icon, .consigne-card__icon');
        cardIcons.forEach(iconDiv => {
            const text = iconDiv.textContent;
            Object.keys(emojiToIconMap).forEach(emoji => {
                if (text.includes(emoji)) {
                    const iconName = emojiToIconMap[emoji];
                    iconDiv.innerHTML = `<i data-lucide="${iconName}" class="icon icon-lg"></i>`;
                }
            });
        });
    }

    // Fonction pour remplacer les emojis dans les spans avec classe emoji
    function replaceEmojisInEmojiSpans() {
        const emojiSpans = document.querySelectorAll('.emoji');
        emojiSpans.forEach(span => {
            const text = span.textContent;
            Object.keys(emojiToIconMap).forEach(emoji => {
                if (text.includes(emoji)) {
                    const iconName = emojiToIconMap[emoji];
                    span.innerHTML = `<i data-lucide="${iconName}" class="icon"></i>`;
                }
            });
        });
    }

    // Fonction de d√©bogage pour voir les emojis d√©tect√©s
    function debugEmojis() {
        const allText = document.body.textContent;
        const foundEmojis = [];
        Object.keys(emojiToIconMap).forEach(emoji => {
            if (allText.includes(emoji)) {
                foundEmojis.push(emoji);
            }
        });
        if (foundEmojis.length > 0) {
            console.log('Emojis d√©tect√©s:', foundEmojis);
        }
    }

    // Fonction principale de remplacement
    function replaceAllEmojis() {
        debugEmojis(); // D√©bogage
        replaceEmojisInElements();
        replaceEmojisInCardIcons();
        replaceEmojisInEmojiSpans();
        replaceEmojisInPageTitle();
        
        // Initialiser Lucide Icons apr√®s remplacement
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    // Attendre que Lucide soit charg√© puis remplacer
    function waitForLucideAndReplace() {
        if (typeof lucide !== 'undefined') {
            replaceAllEmojis();
        } else {
            setTimeout(waitForLucideAndReplace, 100);
        }
    }

    // D√©marrer le processus
    waitForLucideAndReplace();
});
