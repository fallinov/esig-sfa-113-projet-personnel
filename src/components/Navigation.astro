---
import navigation from '../data/navigation.json';
const currentPath = Astro.url.pathname;
const currentHash = Astro.url.hash;

// Debug: afficher les valeurs actuelles
console.log('Current Path:', currentPath);
console.log('Current Hash:', currentHash);

// Fonction pour vérifier si un lien de sous-menu est actif
function isSubmenuActive(subItemUrl: string, currentPath: string, currentHash: string) {
    const subItemPath = subItemUrl.split('#')[0];
    const subItemHash = subItemUrl.split('#')[1];
    
    console.log('Checking:', subItemUrl, 'vs', currentPath + currentHash);
    console.log('SubItem Path:', subItemPath, 'SubItem Hash:', subItemHash);
    
    // Si on est sur la même page
    if (currentPath === subItemPath) {
        // Si le sous-menu a une ancre et qu'on est sur cette ancre
        if (subItemHash && currentHash === `#${subItemHash}`) {
            console.log('Match with hash!');
            return true;
        }
        // Si le sous-menu n'a pas d'ancre et qu'on n'est pas sur une ancre
        if (!subItemHash && !currentHash) {
            console.log('Match without hash!');
            return true;
        }
    }
    console.log('No match');
    return false;
}
---

<!-- Bouton hamburger pour mobile -->
<button class="mobile-menu-toggle" aria-label="Ouvrir le menu de navigation" aria-expanded="false">
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
</button>

<nav class="main-nav" role="navigation" aria-label="Navigation principale">
    <ul class="nav-menu">
        {navigation.map(item => (
            <li class={`nav-item ${item.submenu ? 'has-submenu' : ''} ${currentPath === item.url ? 'active' : ''}`}>
                {item.submenu ? (
                    <!-- Élément avec sous-menu -->
                    <div class="dropdown-container">
                        <button 
                            class="nav-link dropdown-toggle"
                            aria-expanded="false" 
                            aria-controls={`submenu-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
                            data-dropdown-trigger
                        >
                            {item.title}
                            <span class="dropdown-arrow" aria-hidden="true">▼</span>
                        </button>
                        <ul 
                            class="dropdown-menu" 
                            id={`submenu-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
                            role="menu"
                        >
                            {item.submenu.map(subItem => (
                                <li role="none">
                                    <a 
                                        href={`${import.meta.env.BASE_URL}${subItem.url === '/' ? '' : subItem.url.slice(1)}`} 
                                        class="dropdown-link"
                                        data-url={subItem.url}
                                        role="menuitem"
                                    >
                                        {subItem.title}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    </div>
                ) : (
                    <!-- Élément simple sans sous-menu -->
                    <a 
                        href={`${import.meta.env.BASE_URL}${item.url === '/' ? '' : item.url.slice(1)}`} 
                        class="nav-link"
                        aria-current={currentPath === item.url ? 'page' : undefined}
                    >
                        {item.title}
                    </a>
                )}
            </li>
        ))}
    </ul>
</nav>

<script>
// Gestion des liens actifs côté client
function updateActiveLinks() {
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;
    const currentUrl = currentPath + currentHash;
    
    console.log('Client - Current Path:', currentPath);
    console.log('Client - Current Hash:', currentHash);
    console.log('Client - Current URL:', currentUrl);
    
    // Mettre à jour les liens de sous-menu
    const dropdownLinks = document.querySelectorAll('.dropdown-link');
    dropdownLinks.forEach(link => {
        const linkUrl = link.getAttribute('data-url');
        console.log('Checking link:', linkUrl, 'vs', currentUrl);
        
        if (linkUrl === currentUrl) {
            link.classList.add('active');
            console.log('Added active class to:', link.textContent);
        } else {
            link.classList.remove('active');
        }
    });
}

// Exécuter au chargement de la page
document.addEventListener('DOMContentLoaded', updateActiveLinks);

// Exécuter lors des changements d'URL (pour les ancres)
window.addEventListener('hashchange', updateActiveLinks);

// Gestion du scroll offset pour le header sticky
function handleScrollOffset() {
    const header = document.querySelector('.header') as HTMLElement;
    if (header) {
        const headerHeight = header.offsetHeight;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);
    }
}

// Ajuster l'offset au chargement et au redimensionnement
document.addEventListener('DOMContentLoaded', handleScrollOffset);
window.addEventListener('resize', handleScrollOffset);

// Gestion manuelle du scroll pour les ancres
document.addEventListener('click', function(e: Event) {
    const target = e.target as HTMLElement;
    if (!target) return;
    
    const link = target.closest('a[href^="#"]') as HTMLAnchorElement;
    if (link) {
        const targetId = link.getAttribute('href')?.substring(1);
        if (!targetId) return;
        
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
            e.preventDefault();
            const header = document.querySelector('.header') as HTMLElement;
            const headerHeight = header ? header.offsetHeight : 80;
            const targetPosition = targetElement.offsetTop - headerHeight - 20; // 20px de marge supplémentaire
            
            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }
});
</script>
