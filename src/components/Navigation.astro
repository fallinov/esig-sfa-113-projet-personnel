---
import navigation from '../data/navigation.json';
const currentPath = Astro.url.pathname;
---

<nav class="main-nav" role="navigation" aria-label="Navigation principale">
    <ul class="nav-menu">
        {navigation.map(item => (
            <li class={`${item.submenu ? 'has-submenu' : ''} ${currentPath === item.url ? 'active' : ''}`}>
                {item.submenu ? (
                    <!-- Élément avec sous-menu -->
                    <div class="dropdown-container">
                        <a 
                            href={`${import.meta.env.BASE_URL}${item.url === '/' ? '' : item.url.slice(1)}`}
                            class="nav-link dropdown-toggle"
                            aria-expanded="false" 
                            aria-controls={`submenu-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
                        >
                            {item.title}
                            <span class="dropdown-arrow" aria-hidden="true">▼</span>
                        </a>
                        <ul 
                            class="dropdown-menu" 
                            id={`submenu-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
                        >
                            {item.submenu.map(subItem => (
                                <li>
                                    <a 
                                        href={`${import.meta.env.BASE_URL}${subItem.url === '/' ? '' : subItem.url.slice(1)}`} 
                                        class="dropdown-link"
                                        data-url={subItem.url}
                                    >
                                        {subItem.title}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    </div>
                ) : (
                    <!-- Élément simple sans sous-menu -->
                    <a 
                        href={`${import.meta.env.BASE_URL}${item.url === '/' ? '' : item.url.slice(1)}`} 
                        class="nav-link"
                    >
                        {item.title}
                    </a>
                )}
            </li>
        ))}
    </ul>
</nav>

<script>
// Gestion des liens actifs côté client
function updateActiveLinks() {
    const currentUrl = window.location.pathname + window.location.hash;
    
    // D'abord, retirer toutes les classes active
    document.querySelectorAll('.nav-menu li').forEach(li => {
        li.classList.remove('active');
    });
    document.querySelectorAll('.dropdown-link').forEach(link => {
        link.classList.remove('active');
    });
    
    // Mettre à jour les liens de navigation
    const allLinks = document.querySelectorAll('.nav-link, .dropdown-link');
    allLinks.forEach(link => {
        // Pour les liens de sous-menu, utiliser data-url, sinon href
        const linkUrl = link.getAttribute('data-url') || link.getAttribute('href');
        if (linkUrl) {
            // Normaliser les URLs pour la comparaison
            let normalizedLinkUrl = linkUrl.replace(window.location.origin, '');
            
            // Gérer le cas où le site est dans un sous-dossier
            const repoName = '/esig-sfa-113-projet-personnel';
            if (currentUrl.startsWith(repoName)) {
                const normalizedCurrentUrl = currentUrl.replace(repoName, '') || '/';
                if (normalizedLinkUrl.startsWith(repoName)) {
                    normalizedLinkUrl = normalizedLinkUrl.replace(repoName, '') || '/';
                }
                
                if (normalizedLinkUrl === normalizedCurrentUrl) {
                    if (link.classList.contains('dropdown-link')) {
                        // Pour les liens de sous-menu, activer le lien
                        link.classList.add('active');
                    } else {
                        // Pour les liens principaux, activer le li parent
                        const li = link.closest('li');
                        if (li) {
                            li.classList.add('active');
                        }
                    }
                }
            } else {
                // Comparaison normale si pas de sous-dossier
                if (normalizedLinkUrl === currentUrl) {
                    if (link.classList.contains('dropdown-link')) {
                        // Pour les liens de sous-menu, activer le lien
                        link.classList.add('active');
                    } else {
                        // Pour les liens principaux, activer le li parent
                        const li = link.closest('li');
                        if (li) {
                            li.classList.add('active');
                        }
                    }
                }
            }
        }
    });
}

// Exécuter au chargement de la page
document.addEventListener('DOMContentLoaded', updateActiveLinks);

// Exécuter lors des changements d'URL (pour les ancres)
window.addEventListener('hashchange', updateActiveLinks);

// Exécuter lors du scroll pour mettre à jour les liens actifs
window.addEventListener('scroll', updateActiveLinks);

// Gestion du scroll offset pour le header sticky
function handleScrollOffset() {
    const header = document.querySelector('.header') as HTMLElement;
    if (header) {
        const headerHeight = header.offsetHeight;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);
    }
}

// Ajuster l'offset au chargement et au redimensionnement
document.addEventListener('DOMContentLoaded', handleScrollOffset);
window.addEventListener('resize', handleScrollOffset);

// Gestion manuelle du scroll pour les ancres
document.addEventListener('click', function(e: Event) {
    const target = e.target as HTMLElement;
    if (!target) return;
    
    const link = target.closest('a[href^="#"]') as HTMLAnchorElement;
    if (link) {
        const targetId = link.getAttribute('href')?.substring(1);
        if (!targetId) return;
        
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
            e.preventDefault();
            const header = document.querySelector('.header') as HTMLElement;
            const headerHeight = header ? header.offsetHeight : 80;
            const targetPosition = targetElement.offsetTop - headerHeight - 20; // 20px de marge supplémentaire
            
            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }
});

// Gestion unifiée des menus
class NavigationManager {
    private toggleButton: HTMLElement | null;
    private nav: HTMLElement | null;
    private isMobileOpen: boolean = false;

    constructor() {
        this.toggleButton = document.querySelector('.mobile-menu-toggle');
        this.nav = document.querySelector('.main-nav');
        this.init();
    }

    init() {
        if (this.toggleButton && this.nav) {
            this.initMobileMenu();
            this.initDropdowns();
            this.initEventListeners();
        }
    }

    initMobileMenu() {
        this.toggleButton?.addEventListener('click', () => this.toggleMobileMenu());
        
        // Fermer le menu au clic sur un lien
        const links = this.nav?.querySelectorAll('a:not(.dropdown-toggle)');
        links?.forEach(link => {
            link.addEventListener('click', () => this.closeMobileMenu());
        });

        // Fermer le menu au clic sur l'overlay
        this.nav?.addEventListener('click', (e) => {
            if (this.isMobileOpen && e.target === this.nav) {
                this.closeMobileMenu();
            }
        });

        // Fermer le menu avec Échap
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isMobileOpen) {
                this.closeMobileMenu();
            }
        });
    }

    initDropdowns() {
        const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
        dropdownToggles.forEach(toggle => {
            toggle.addEventListener('click', (e) => this.handleDropdownToggle(e));
        });

        // Fermer les dropdowns au clic sur un lien de sous-menu
        const dropdownLinks = document.querySelectorAll('.dropdown-link');
        dropdownLinks.forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth > 1023) {
                    this.closeAllDropdowns();
                }
            });
        });

        // Fermer les dropdowns en cliquant ailleurs
        document.addEventListener('click', (e) => {
            if (window.innerWidth > 1023) {
                const target = e.target as HTMLElement;
                if (!target.closest('.dropdown-container')) {
                    this.closeAllDropdowns();
                }
            }
        });
    }

    initEventListeners() {
        // Gestion du redimensionnement
        window.addEventListener('resize', () => {
            if (window.innerWidth > 1023) {
                this.closeMobileMenu();
            }
        });
    }

    handleDropdownToggle(e: Event) {
        const toggle = e.target as HTMLElement;
        const dropdown = toggle.nextElementSibling as HTMLElement;
        
        if (window.innerWidth <= 1023) {
            // Mobile
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            const isOpen = dropdown?.classList.contains('show');
            this.closeAllDropdowns();
            
            if (!isOpen) {
                dropdown?.classList.add('show');
                toggle.setAttribute('aria-expanded', 'true');
            }
        } else {
            // Desktop
            e.preventDefault();
            const isOpen = dropdown?.classList.contains('show');
            this.closeAllDropdowns();
            
            if (!isOpen) {
                dropdown?.classList.add('show');
                toggle.setAttribute('aria-expanded', 'true');
            }
        }
    }

    toggleMobileMenu() {
        if (this.isMobileOpen) {
            this.closeMobileMenu();
        } else {
            this.openMobileMenu();
        }
    }

    openMobileMenu() {
        if (this.toggleButton && this.nav) {
            this.isMobileOpen = true;
            this.toggleButton.setAttribute('aria-expanded', 'true');
            this.toggleButton.classList.add('active');
            this.nav.classList.add('mobile-open');
            document.body.style.overflow = 'hidden';
        }
    }

    closeMobileMenu() {
        if (this.toggleButton && this.nav) {
            this.isMobileOpen = false;
            this.toggleButton.setAttribute('aria-expanded', 'false');
            this.toggleButton.classList.remove('active');
            this.nav.classList.remove('mobile-open');
            document.body.style.overflow = '';
        }
    }

    closeAllDropdowns() {
        const dropdowns = document.querySelectorAll('.dropdown-menu');
        const toggles = document.querySelectorAll('.dropdown-toggle');
        
        dropdowns.forEach(dropdown => dropdown.classList.remove('show'));
        toggles.forEach(toggle => toggle.setAttribute('aria-expanded', 'false'));
    }
}

// Initialiser la navigation
document.addEventListener('DOMContentLoaded', () => {
    new NavigationManager();
});
</script>
